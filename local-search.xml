<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>借助 Unity Job System 实现视锥体剔除</title>
    <link href="/posts/14d73742/"/>
    <url>/posts/14d73742/</url>
    
    <content type="html"><![CDATA[<h1 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h1><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c#"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> Unity.Burst;<br><span class="hljs-keyword">using</span> Unity.Collections;<br><span class="hljs-keyword">using</span> Unity.Jobs;<br><span class="hljs-keyword">using</span> Unity.Mathematics;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">static</span> Unity.Mathematics.math;<br><br>[<span class="hljs-meta">BurstCompile</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> FrustumCullingJob : IJobParallelForFilter<br>&#123;<br>    [<span class="hljs-meta">ReadOnly</span>] <span class="hljs-keyword">public</span> NativeArray&lt;float4&gt; Planes;<br>    [<span class="hljs-meta">ReadOnly</span>] <span class="hljs-keyword">public</span> NativeArray&lt;int3&gt; Sections;<br>    [<span class="hljs-meta">ReadOnly</span>] <span class="hljs-keyword">public</span> int3 SectionOffset;<br>    [<span class="hljs-meta">ReadOnly</span>] <span class="hljs-keyword">public</span> int3 SectionSize;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">Execute</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        float3 aabbMin = Sections[index] + SectionOffset;<br>        float3 aabbMax = aabbMin + SectionSize;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>        &#123;<br>            float4 plane = Planes[i];<br>            float4 min = float4(aabbMin, <span class="hljs-number">1</span>);<br>            float4 max = float4(aabbMax, <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">if</span> (plane.x &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                min.x = aabbMax.x;<br>                max.x = aabbMin.x;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (plane.y &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                min.y = aabbMax.y;<br>                max.y = aabbMin.y;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (plane.z &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                min.z = aabbMax.z;<br>                max.z = aabbMin.z;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dot(plane, min) &lt;= <span class="hljs-number">0</span> &amp;&amp; dot(plane, max) &lt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>游戏开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Job System</tag>
      
      <tag>Burst Compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>借助 Unity Job System 计算视锥体平面</title>
    <link href="/posts/1ff19c03/"/>
    <url>/posts/1ff19c03/</url>
    
    <content type="html"><![CDATA[<h1 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h1><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c#"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> Unity.Burst;<br><span class="hljs-keyword">using</span> Unity.Collections;<br><span class="hljs-keyword">using</span> Unity.Jobs;<br><span class="hljs-keyword">using</span> Unity.Mathematics;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">static</span> Unity.Mathematics.math;<br><br>[<span class="hljs-meta">BurstCompile</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> CalculateFrustumPlaneJob : IJob<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Near;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Far;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> FOV;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Aspect;<br>    <span class="hljs-keyword">public</span> float3x4 Camera;<br>    [<span class="hljs-meta">WriteOnly</span>] <span class="hljs-keyword">public</span> NativeArray&lt;float4&gt; Planes;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">float</span> halfHeight = Far * tan(radians(FOV * <span class="hljs-number">0.5f</span>));<br>        float3 up = Camera.c1 * halfHeight;<br>        float3 right = Camera.c0 * halfHeight * Aspect;<br>        float3 nearCenter = Camera.c3 + Near * Camera.c2;<br>        float3 farCenter = Camera.c3 + Far * Camera.c2;<br>        float3x4 corners = float3x4(<br>            farCenter - up - right,<br>            farCenter - up + right,<br>            farCenter + up - right,<br>            farCenter + up + right<br>        );<br><br>        Planes[<span class="hljs-number">0</span>] = CalculatePlane(Camera.c3, corners.c2, corners.c0); <span class="hljs-comment">// left</span><br>        Planes[<span class="hljs-number">1</span>] = CalculatePlane(Camera.c3, corners.c1, corners.c3); <span class="hljs-comment">// right</span><br>        Planes[<span class="hljs-number">2</span>] = CalculatePlane(Camera.c3, corners.c3, corners.c2); <span class="hljs-comment">// top</span><br>        Planes[<span class="hljs-number">3</span>] = CalculatePlane(Camera.c3, corners.c0, corners.c1); <span class="hljs-comment">// down</span><br>        Planes[<span class="hljs-number">4</span>] = CalculatePlane(Camera.c2, nearCenter); <span class="hljs-comment">// near</span><br>        Planes[<span class="hljs-number">5</span>] = CalculatePlane(-Camera.c2, farCenter); <span class="hljs-comment">// far</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> float4 <span class="hljs-title">CalculatePlane</span>(<span class="hljs-params"><span class="hljs-keyword">in</span> float3 a, <span class="hljs-keyword">in</span> float3 b, <span class="hljs-keyword">in</span> float3 c</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        float3 normal = normalize(cross(b - a, c - a));<br>        <span class="hljs-keyword">return</span> CalculatePlane(normal, a);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> float4 <span class="hljs-title">CalculatePlane</span>(<span class="hljs-params"><span class="hljs-keyword">in</span> float3 normal, <span class="hljs-keyword">in</span> float3 a</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">return</span> float4(normal, -dot(normal, a));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CalculateFrustumPlanes</span>(<span class="hljs-params">Camera camera, NativeArray&lt;float4&gt; planes</span>)</span><br><span class="hljs-function"></span>&#123;<br>    Matrix4x4 matrix = camera.transform.localToWorldMatrix;<br>    CalculateFrustumPlaneJob job = <span class="hljs-keyword">new</span> CalculateFrustumPlaneJob<br>    &#123;<br>        Near = camera.nearClipPlane,<br>        Far = camera.farClipPlane,<br>        FOV = camera.fieldOfView,<br>        Aspect = camera.aspect,<br>        Camera = float3x4(matrix.m00, matrix.m01, matrix.m02, matrix.m03, matrix.m10, matrix.m11, matrix.m12, matrix.m13, matrix.m20, matrix.m21, matrix.m22, matrix.m23),<br>        Planes = planes<br>    &#125;;<br>    job.Run();<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>游戏开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Job System</tag>
      
      <tag>Burst Compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Unity 中还原浊心斯卡蒂 Live2D</title>
    <link href="/posts/75871ce8/"/>
    <url>/posts/75871ce8/</url>
    
    <content type="html"><![CDATA[<p>提示：正在找时间补全中…</p><p><code>Spine</code> 在导入后会报一系列错误……</p><p>需要在 <code>/Spine/spine-csharp/AnimationState.cs</code> 中做一些修改，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>From last to first mixingFrom entries, sets timelinesFirst to true on last, calls checkTimelineUsage on rest.<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetTimelinesFirst</span> (<span class="hljs-params">TrackEntry entry</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (entry.mixingFrom != <span class="hljs-literal">null</span>) &#123;<br>        SetTimelinesFirst(entry.mixingFrom);<br>        CheckTimelinesUsage(entry, entry.timelinesFirst);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> propertyIDs = <span class="hljs-keyword">this</span>.propertyIDs;<br>    <span class="hljs-keyword">var</span> timelines = entry.animation.timelines;<br>    <span class="hljs-built_in">int</span> n = timelines.Count;<br>    entry.timelinesFirst.EnsureCapacity(n); <span class="hljs-comment">// entry.timelinesFirst.setSize(n);</span><br>    <span class="hljs-keyword">var</span> usage = entry.timelinesFirst.Items;<br>    <span class="hljs-keyword">var</span> timelinesItems = timelines.Items;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        propertyIDs.Add(timelinesItems[i].PropertyId);<br>        usage[i] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// &lt;- 把这个 true 改成 false 即可</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">Shader <span class="hljs-string">&quot;Unlit/AlphaSplit&quot;</span><br>&#123;<br>    Properties<br>    &#123;<br>        [NoScaleOffset] _MainTex (<span class="hljs-string">&quot;Texture(Main)&quot;</span>, <span class="hljs-number">2</span>D) = <span class="hljs-string">&quot;white&quot;</span> &#123;&#125;<br>        [NoScaleOffset] _AlphaTex (<span class="hljs-string">&quot;Texture(Alpha)&quot;</span>, <span class="hljs-number">2</span>D) = <span class="hljs-string">&quot;white&quot;</span> &#123;&#125;<br>        _Color(<span class="hljs-string">&quot;Color&quot;</span>, Color) = (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    &#125;<br>    SubShader<br>    &#123;<br>        Tags &#123; <span class="hljs-string">&quot;Queue&quot;</span>=<span class="hljs-string">&quot;Transparent&quot;</span> <span class="hljs-string">&quot;IgnoreProjector&quot;</span>=<span class="hljs-string">&quot;True&quot;</span> <span class="hljs-string">&quot;RenderType&quot;</span>=<span class="hljs-string">&quot;Transparent&quot;</span> &#125;<br>        LOD <span class="hljs-number">100</span><br><br>Fog &#123; Mode Off &#125;<br>Cull Off<br>ZWrite Off<br>Blend One OneMinusSrcAlpha<br>Lighting Off<br><br>        Pass<br>        &#123;<br>            CGPROGRAM<br>            <span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> vertex vert</span><br>            <span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> fragment frag</span><br><br>            <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;UnityCG.cginc&quot;</span></span><br><br>            struct appdata<br>            &#123;<br>                float4 vertex : POSITION;<br>                float2 uv : TEXCOORD0;<br>                fixed4 color : COLOR;<br>            &#125;;<br><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">v2f</span></span><br><span class="hljs-class">            &#123;</span><br>                float4 vertex : SV_POSITION;<br>                float2 uv : TEXCOORD0;<br>                fixed4 color : TEXCOORD1;<br>            &#125;;<br><br>            sampler2D _MainTex;<br>            sampler2D _AlphaTex;<br>            fixed4 _Color;<br><br>            <span class="hljs-function">v2f <span class="hljs-title">vert</span> <span class="hljs-params">(appdata v)</span></span><br><span class="hljs-function">            </span>&#123;<br>                v2f o;<br>                o.vertex = UnityObjectToClipPos(v.vertex);<br>                o.uv = v.uv;<br>                o.color = v.color;<br>                <span class="hljs-keyword">return</span> o;<br>            &#125;<br><br>            <span class="hljs-function">fixed4 <span class="hljs-title">frag</span> <span class="hljs-params">(v2f i)</span> : SV_Target</span><br><span class="hljs-function">            </span>&#123;<br>                fixed4 color = tex2D(_MainTex, i.uv);<br>                color.a = tex2D(_AlphaTex, i.uv).r;<br>                <span class="hljs-keyword">return</span> color * _Color * i.color;<br>            &#125;<br>            ENDCG<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> Spine;<br><span class="hljs-keyword">using</span> Spine.Unity;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><span class="hljs-keyword">using</span> UnityEngine.UI;<br><span class="hljs-keyword">using</span> Random = UnityEngine.Random;<br><br>[<span class="hljs-meta">RequireComponent(typeof(RawImage))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DynIllustChar</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IPointerClickHandler</span><br>&#123;<br>    [<span class="hljs-meta">Serializable</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> VoiceData<br>    &#123;<br>        <span class="hljs-keyword">public</span> AudioClip Audio;<br>        [<span class="hljs-meta">TextArea(5, 8)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Text;<br>    &#125;<br><br><br>    [<span class="hljs-meta">Header(<span class="hljs-meta-string">&quot;Configs&quot;</span>)</span>]<br><br>    [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> Vector2Int m_ScreenResolution = <span class="hljs-keyword">new</span> Vector2Int(<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>);<br><br>    [<span class="hljs-meta">Header(<span class="hljs-meta-string">&quot;References&quot;</span>)</span>]<br><br>    [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> SkeletonAnimation m_Animation;<br>    [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> Camera m_CharRenderCamera;<br>    [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> AudioSource m_VoiceAudioSource;<br>    [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> Text m_VoiceText;<br><br>    [<span class="hljs-meta">Header(<span class="hljs-meta-string">&quot;Animations&quot;</span>)</span>]<br><br>    [<span class="hljs-meta">SpineAnimation(dataField = <span class="hljs-meta-string">&quot;m_Animation&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> IdleAnimation = <span class="hljs-string">&quot;Idle&quot;</span>;<br>    [<span class="hljs-meta">SpineAnimation(dataField = <span class="hljs-meta-string">&quot;m_Animation&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> InteractAnimation = <span class="hljs-string">&quot;Interact&quot;</span>;<br>    [<span class="hljs-meta">SpineAnimation(dataField = <span class="hljs-meta-string">&quot;m_Animation&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> SpecialAnimation = <span class="hljs-string">&quot;Special&quot;</span>;<br><br>    [<span class="hljs-meta">Header(<span class="hljs-meta-string">&quot;Voices&quot;</span>)</span>]<br><br>    <span class="hljs-keyword">public</span> VoiceData StartVoice;<br>    <span class="hljs-keyword">public</span> VoiceData IdleVoice;<br>    <span class="hljs-keyword">public</span> List&lt;VoiceData&gt; InteractVoices;<br><br>    <span class="hljs-keyword">private</span> RenderTexture m_CharRT;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> m_IsPlayingInteract;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> m_LastTimePlaySpecial;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> m_LastTimeInteract;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        m_CharRT = RenderTexture.GetTemporary(m_ScreenResolution.x, m_ScreenResolution.y, <span class="hljs-number">0</span>, RenderTextureFormat.BGRA32, RenderTextureReadWrite.sRGB);<br>        m_CharRenderCamera.targetTexture = m_CharRT;<br>        GetComponent&lt;RawImage&gt;().texture = m_CharRT;<br><br>        m_IsPlayingInteract = <span class="hljs-literal">false</span>;<br>        m_LastTimePlaySpecial = Time.time;<br>        m_LastTimeInteract = Time.time;<br><br>        m_Animation.AnimationState.End += (TrackEntry trackEntry) =&gt;<br>        &#123;<br>            <span class="hljs-keyword">if</span> (trackEntry.Animation.Name == InteractAnimation)<br>            &#123;<br>                m_IsPlayingInteract = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;;<br><br>        m_Animation.AnimationState.Complete += (TrackEntry trackEntry) =&gt;<br>        &#123;<br>            <span class="hljs-built_in">float</span> time = Time.time;<br><br>            <span class="hljs-keyword">if</span> (time - m_LastTimePlaySpecial &gt;= <span class="hljs-number">8</span> &amp;&amp; Random.<span class="hljs-keyword">value</span> &lt; <span class="hljs-number">0.3f</span>)<br>            &#123;<br>                m_LastTimePlaySpecial = time;<br>                PlayAnimation(SpecialAnimation);<br>            &#125;<br>        &#125;;<br><br>        PlayVoice(StartVoice);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        RenderTexture.ReleaseTemporary(m_CharRT);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-built_in">float</span> time = Time.time;<br><br>        <span class="hljs-keyword">if</span> (time - m_LastTimeInteract &gt;= <span class="hljs-number">5</span> * <span class="hljs-number">60</span>)<br>        &#123;<br>            m_LastTimeInteract = time;<br>            PlayVoice(IdleVoice);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> IPointerClickHandler.OnPointerClick(PointerEventData eventData)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_IsPlayingInteract)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        m_IsPlayingInteract = <span class="hljs-literal">true</span>;<br>        m_LastTimeInteract = Time.time;<br><br>        <span class="hljs-built_in">int</span> index = Random.Range(<span class="hljs-number">0</span>, InteractVoices.Count);<br>        VoiceData voice = InteractVoices[index];<br>        PlayVoice(voice);<br>        PlayAnimation(InteractAnimation);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlayVoice</span>(<span class="hljs-params">VoiceData voice</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        <span class="hljs-keyword">if</span> (m_VoiceAudioSource.isPlaying)<br>        &#123;<br>            m_VoiceAudioSource.Stop();<br>        &#125;<br><br>        m_VoiceAudioSource.clip = voice.Audio;<br>        m_VoiceAudioSource.Play();<br><br>        m_VoiceText.text = voice.Text;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PlayAnimation</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> animationName</span>)</span><br><span class="hljs-function"></span>    &#123;<br>        m_Animation.AnimationState.SetAnimation(<span class="hljs-number">0</span>, animationName, <span class="hljs-literal">false</span>);<br>        m_Animation.AnimationState.AddAnimation(<span class="hljs-number">0</span>, IdleAnimation, <span class="hljs-literal">true</span>, <span class="hljs-number">0</span>);<br>        Debug.Log(<span class="hljs-string">&quot;Play &quot;</span> + animationName);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>游戏开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>ShaderLab</tag>
      
      <tag>Spine</tag>
      
      <tag>明日方舟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C 函数调用约定</title>
    <link href="/posts/e361f078/"/>
    <url>/posts/e361f078/</url>
    
    <content type="html"><![CDATA[<p>当一个函数被调用时，参数会被传递给这个函数，返回值会被返回给调用函数。函数调用约定主要约束了三件事：</p><ol><li>参数传递顺序</li><li>堆栈维护职责</li><li>名称修饰约定</li></ol><h1 id="stdcall"><a href="#stdcall" class="headerlink" title="__stdcall"></a><code>__stdcall</code></h1><p>Win32 API 函数绝大部分都是采用 <code>__stdcall</code> 调用约定的。<code>WINAPI</code> 其实也只是 <code>__stdcall</code> 的一个别名而已。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WINAPI __stdcall</span><br></code></pre></div></td></tr></table></figure><p>以下列表显示此调用约定的实现。</p><div class="table-container"><table><thead><tr><th style="text-align:center">元素</th><th style="text-align:left">实现</th></tr></thead><tbody><tr><td style="text-align:center">参数传递顺序</td><td style="text-align:left">从右向左</td></tr><tr><td style="text-align:center">堆栈维护职责</td><td style="text-align:left">被调用的函数从堆栈中弹出自己的参数</td></tr><tr><td style="text-align:center">名称修饰约定</td><td style="text-align:left"><code>_</code> 作为名称的前缀，名称后跟 <code>@</code> 符号和所有参数占用的字节数（十进制）</td></tr></tbody></table></div><p>关于名称修饰约定，例如：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">double</span> b)</span></span>; <span class="hljs-comment">// 修饰后的名称为: _func@12</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注：由于该调用约定是被调用方清理堆栈，因此编译器会对 <code>vararg</code> 函数使用 <code>__cdecl</code>。</p></blockquote><h1 id="cdecl"><a href="#cdecl" class="headerlink" title="__cdecl"></a><code>__cdecl</code></h1><p><code>__cdecl</code> 是 <code>C Declaration</code> 的缩写，是 <code>C/C++</code> 程序的默认调用约定。</p><p>以下列表显示此调用约定的实现。</p><div class="table-container"><table><thead><tr><th style="text-align:center">元素</th><th style="text-align:left">实现</th></tr></thead><tbody><tr><td style="text-align:center">参数传递顺序</td><td style="text-align:left">从右向左</td></tr><tr><td style="text-align:center">堆栈维护职责</td><td style="text-align:left">调用函数从堆栈中弹出参数</td></tr><tr><td style="text-align:center">名称修饰约定</td><td style="text-align:left"><code>_</code> 作为名称的前缀，但导出使用 C 链接的 <code>__cdecl</code> 函数时除外</td></tr></tbody></table></div><p>由于堆栈由调用方清理，因此它可以执行 <code>vararg</code> 函数，但该调用约定创建的可执行文件比 <code>__stdcall</code> 更大，因为它要求每个函数调用都包含堆栈清理代码。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://docs.microsoft.com/en-us/cpp/cpp/calling-conventions?view=msvc-160">MSDN</a></li><li><a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/3306047?fr=aladdin">百度百科</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>函数调用约定</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 利用 ctypes 调用 C 库函数</title>
    <link href="/posts/1e958f7/"/>
    <url>/posts/1e958f7/</url>
    
    <content type="html"><![CDATA[<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> CDLL<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br>dll = CDLL(<span class="hljs-string">&quot;dll name&quot;</span>)  <span class="hljs-comment"># 将 dll name 换成要调用的库的名称</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">native_impl</span>(<span class="hljs-params">*argtypes, returns=<span class="hljs-literal">None</span>, name=<span class="hljs-literal">None</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;指示函数在 C 库中实现。</span><br><span class="hljs-string">    被装饰的函数在被调用时，首先会调用 C 库中具有指定名称的函数，</span><br><span class="hljs-string">    之后被装饰函数的函数体才会被执行。</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        argtypes: 参数类型列表。</span><br><span class="hljs-string">        returns: 返回值类型。如果该值为None，则没有返回值(void)。</span><br><span class="hljs-string">        name: 函数在类库中的名称。如果该值为None，则使用定义的函数的名称。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">native_decorator</span>(<span class="hljs-params">func</span>):</span><br>        native_name = name <span class="hljs-keyword">if</span> name <span class="hljs-keyword">else</span> func.__name__<br>        native_func = <span class="hljs-built_in">getattr</span>(dll, native_name)<br>        native_func.argtypes = argtypes<br>        native_func.restype = returns<br>        print(<span class="hljs-string">&quot;Load native function: &#123;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(native_name))<br>        <br><span class="hljs-meta">        @wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func_wrap</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>            value = native_func(*args, **kwargs)<br>            func(*args, **kwargs)  <span class="hljs-comment"># 回调</span><br>            <span class="hljs-keyword">return</span> value<br>        <span class="hljs-keyword">return</span> func_wrap<br>    <span class="hljs-keyword">return</span> native_decorator<br></code></pre></div></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>以调用 <code>OpenAL</code> 的部分函数为例：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># import ...</span><br><br><span class="hljs-meta">@native_impl(<span class="hljs-params">returns=ALenum</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">alGetError</span>():</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># ------------------------------------------------------------------</span><br><span class="hljs-comment"># Buffer Functions</span><br><span class="hljs-comment"># ------------------------------------------------------------------</span><br><br><span class="hljs-meta">@native_impl(<span class="hljs-params">ALsizei, POINTER(<span class="hljs-params">ALuint</span>)</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">alGenBuffers</span>(<span class="hljs-params">n, buffers</span>):</span><br>    error = alGetError()<br>    <span class="hljs-keyword">if</span> error == AL_INVALID_VALUE:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The buffer array isn&#x27;t large enough to hold the number of buffers requested.&quot;</span>)<br>    <span class="hljs-keyword">elif</span> error == AL_OUT_OF_MEMORY:<br>        <span class="hljs-keyword">raise</span> MemoryError(<span class="hljs-string">&quot;There is not enough memory available to generate all the buffers requested.&quot;</span>)<br><br><span class="hljs-meta">@native_impl(<span class="hljs-params">ALsizei, POINTER(<span class="hljs-params">ALuint</span>)</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">alDeleteBuffers</span>(<span class="hljs-params">n, buffers</span>):</span><br>    error = alGetError()<br>    <span class="hljs-keyword">if</span> error == AL_INVALID_OPERATION:<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;The buffer is still in use and can not be deleted.&quot;</span>)<br>    <span class="hljs-keyword">elif</span> error == AL_INVALID_NAME:<br>        <span class="hljs-keyword">raise</span> NameError(<span class="hljs-string">&quot;A buffer name is invalid.&quot;</span>)<br>    <span class="hljs-keyword">elif</span> error == AL_INVALID_VALUE:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The requested number of buffers can not be deleted.&quot;</span>)<br><br><span class="hljs-meta">@native_impl(<span class="hljs-params">ALuint, ALenum, POINTER(<span class="hljs-params">ALvoid</span>), ALsizei, ALsizei</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">alBufferData</span>(<span class="hljs-params">buffer, <span class="hljs-built_in">format</span>, data, size, freq</span>):</span><br>    error = alGetError()<br>    <span class="hljs-keyword">if</span> error == AL_OUT_OF_MEMORY:<br>        <span class="hljs-keyword">raise</span> MemoryError(<span class="hljs-string">&quot;There is not enough memory available to create this buffer.&quot;</span>)<br>    <span class="hljs-keyword">elif</span> error == AL_INVALID_VALUE:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The size parameter is not valid for the format specified, the buffer is in use, or the data is a NULL pointer.&quot;</span>)<br>    <span class="hljs-keyword">elif</span> error == AL_INVALID_ENUM:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The specified format does not exist.&quot;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 从 Arduino 获取 JY61P 及压力传感器数据</title>
    <link href="/posts/7a9115b2/"/>
    <url>/posts/7a9115b2/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本文内容具有一定的时效性，无法保证其在您阅读时依旧正确。开发板为 Arduino UNO。</p>          </div><h1 id="Arduino-部分"><a href="#Arduino-部分" class="headerlink" title="Arduino 部分"></a>Arduino 部分</h1><p>Arduino 部分的代码，主要实现了：</p><ul><li>读取与校验 JY61P 陀螺仪传感器的数据。</li><li>读取压力传感器的数据。</li><li>通过串口将数据发送至 Python。</li></ul><h2 id="JY61P-参数"><a href="#JY61P-参数" class="headerlink" title="JY61P 参数"></a>JY61P 参数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">主要参数</th><th style="text-align:center">参数值</th></tr></thead><tbody><tr><td style="text-align:center">使用芯片</td><td style="text-align:center">ICM-42605</td></tr><tr><td style="text-align:center">电压</td><td style="text-align:center">3.3-5V</td></tr><tr><td style="text-align:center">电流</td><td style="text-align:center">&lt;25mA</td></tr><tr><td style="text-align:center">通信方式</td><td style="text-align:center">串口TTL/IIC通信</td></tr><tr><td style="text-align:center">输出数据</td><td style="text-align:center">三轴（加速度+角速度+角度）+ 四元数</td></tr><tr><td style="text-align:center">陀螺仪范围</td><td style="text-align:center">±250/500/1000/2000°/s（可设置）</td></tr><tr><td style="text-align:center">加速度范围</td><td style="text-align:center">±2/4/8/16g（可设置）</td></tr><tr><td style="text-align:center">角度范围</td><td style="text-align:center">X/Z轴：±180°  Y轴：±90°</td></tr><tr><td style="text-align:center">角度精度</td><td style="text-align:center">静态：0.05°  动态：0.1°</td></tr><tr><td style="text-align:center">回传速度</td><td style="text-align:center">0.1-200Hz（可设置）</td></tr><tr><td style="text-align:center">波特率</td><td style="text-align:center">4800-921600（IIC速率达400K）</td></tr></tbody></table></div><h2 id="读取陀螺仪的数据"><a href="#读取陀螺仪的数据" class="headerlink" title="读取陀螺仪的数据"></a>读取陀螺仪的数据</h2><h3 id="数据协议"><a href="#数据协议" class="headerlink" title="数据协议"></a>数据协议</h3><p><strong>此部分内容也可以自行阅读《JY61P姿态角度传感器说明书》。</strong></p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li>数据是按照16进制方式发送的，不是 ASCII 码。</li><li>每个数据分低字节和高字节依次传送，二者组合成一个有符号的 <code>short</code> 类型的数据。</li></ol><h4 id="加速度"><a href="#加速度" class="headerlink" title="加速度"></a>加速度</h4><div class="table-container"><table><thead><tr><th style="text-align:center">数据编号</th><th style="text-align:center">数据内容</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0x55</td><td style="text-align:center">包头</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0x51</td><td style="text-align:center">加速度标识</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">AxL</td><td style="text-align:center">X分量低字节</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">AxH</td><td style="text-align:center">X分量高字节</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">AyL</td><td style="text-align:center">Y分量低字节</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">AyH</td><td style="text-align:center">Y分量高字节</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">AzL</td><td style="text-align:center">Z分量低字节</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">AzH</td><td style="text-align:center">Z分量高字节</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">TL</td><td style="text-align:center">温度低字节</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">TH</td><td style="text-align:center">温度高字节</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">SUM</td><td style="text-align:center">校验和</td></tr></tbody></table></div><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 加速度计算公式（g 为重力加速度；单位：米每二次方秒）</span><br><span class="hljs-keyword">double</span> a_x = (((<span class="hljs-keyword">short</span>)AxH &lt;&lt; <span class="hljs-number">8</span>) | AxL) / <span class="hljs-number">32768.0</span> * <span class="hljs-number">16</span> * g;<br><span class="hljs-keyword">double</span> a_y = (((<span class="hljs-keyword">short</span>)AyH &lt;&lt; <span class="hljs-number">8</span>) | AyL) / <span class="hljs-number">32768.0</span> * <span class="hljs-number">16</span> * g;<br><span class="hljs-keyword">double</span> a_z = (((<span class="hljs-keyword">short</span>)AzH &lt;&lt; <span class="hljs-number">8</span>) | AzL) / <span class="hljs-number">32768.0</span> * <span class="hljs-number">16</span> * g;<br><br><span class="hljs-comment">// 温度计算公式（单位：摄氏度）</span><br><span class="hljs-keyword">double</span> T = (((<span class="hljs-keyword">short</span>)TH &lt;&lt; <span class="hljs-number">8</span>) | TL) / <span class="hljs-number">100.0</span>;<br><br><span class="hljs-comment">// 校验和（如果下面的等式成立，则校验成功）</span><br>SUM == (<span class="hljs-number">0x55</span> + <span class="hljs-number">0x51</span> + AxL + AxH + AyL + AyH + AzL + AzH + TL + TH)<br></code></pre></div></td></tr></table></figure><h4 id="角速度"><a href="#角速度" class="headerlink" title="角速度"></a>角速度</h4><div class="table-container"><table><thead><tr><th style="text-align:center">数据编号</th><th style="text-align:center">数据内容</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0x55</td><td style="text-align:center">包头</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0x52</td><td style="text-align:center">角速度标识</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">WxL</td><td style="text-align:center">X分量低字节</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">WxH</td><td style="text-align:center">X分量高字节</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">WyL</td><td style="text-align:center">Y分量低字节</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">WyH</td><td style="text-align:center">Y分量高字节</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">WzL</td><td style="text-align:center">Z分量低字节</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">WzH</td><td style="text-align:center">Z分量高字节</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">TL</td><td style="text-align:center">温度低字节</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">TH</td><td style="text-align:center">温度高字节</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">SUM</td><td style="text-align:center">校验和</td></tr></tbody></table></div><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 角速度计算公式（单位：角度每秒）</span><br><span class="hljs-keyword">double</span> w_x = (((<span class="hljs-keyword">short</span>)WxH &lt;&lt; <span class="hljs-number">8</span>) | WxL) / <span class="hljs-number">32768.0</span> * <span class="hljs-number">2000</span>;<br><span class="hljs-keyword">double</span> w_y = (((<span class="hljs-keyword">short</span>)WyH &lt;&lt; <span class="hljs-number">8</span>) | WyL) / <span class="hljs-number">32768.0</span> * <span class="hljs-number">2000</span>;<br><span class="hljs-keyword">double</span> w_z = (((<span class="hljs-keyword">short</span>)WzH &lt;&lt; <span class="hljs-number">8</span>) | WzL) / <span class="hljs-number">32768.0</span> * <span class="hljs-number">2000</span>;<br><br><span class="hljs-comment">// 温度计算公式（单位：摄氏度）</span><br><span class="hljs-keyword">double</span> T = (((<span class="hljs-keyword">short</span>)TH &lt;&lt; <span class="hljs-number">8</span>) | TL) / <span class="hljs-number">100.0</span>;<br><br><span class="hljs-comment">// 校验和（如果下面的等式成立，则校验成功）</span><br>SUM == (<span class="hljs-number">0x55</span> + <span class="hljs-number">0x52</span> + WxL + WxH + WyL + WyH + WzL + WzH + TL + TH)<br></code></pre></div></td></tr></table></figure><h4 id="角度"><a href="#角度" class="headerlink" title="角度"></a>角度</h4><div class="table-container"><table><thead><tr><th style="text-align:center">数据编号</th><th style="text-align:center">数据内容</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0x55</td><td style="text-align:center">包头</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0x53</td><td style="text-align:center">角度标识</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">RollL</td><td style="text-align:center">X分量（滚转角）低字节</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">RollH</td><td style="text-align:center">X分量（滚转角）高字节</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">PitchL</td><td style="text-align:center">Y分量（俯仰角）低字节</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">PitchH</td><td style="text-align:center">Y分量（俯仰角）高字节</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">YawL</td><td style="text-align:center">Z分量（偏航角）低字节</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">YawH</td><td style="text-align:center">Z分量（偏航角）高字节</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">TL</td><td style="text-align:center">温度低字节</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">TH</td><td style="text-align:center">温度高字节</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">SUM</td><td style="text-align:center">校验和</td></tr></tbody></table></div><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 加速度计算公式（单位：角度）</span><br><span class="hljs-keyword">double</span> Roll = (((<span class="hljs-keyword">short</span>)RollH &lt;&lt; <span class="hljs-number">8</span>) | RollL) / <span class="hljs-number">32768.0</span> * <span class="hljs-number">180</span>;<br><span class="hljs-keyword">double</span> Pitch = (((<span class="hljs-keyword">short</span>)PitchH &lt;&lt; <span class="hljs-number">8</span>) | PitchL) / <span class="hljs-number">32768.0</span> * <span class="hljs-number">180</span>;<br><span class="hljs-keyword">double</span> Yaw = (((<span class="hljs-keyword">short</span>)YawH &lt;&lt; <span class="hljs-number">8</span>) | YawL) / <span class="hljs-number">32768.0</span> * <span class="hljs-number">180</span>;<br><br><span class="hljs-comment">// 温度计算公式（单位：摄氏度）</span><br><span class="hljs-keyword">double</span> T = (((<span class="hljs-keyword">short</span>)TH &lt;&lt; <span class="hljs-number">8</span>) | TL) / <span class="hljs-number">100.0</span>;<br><br><span class="hljs-comment">// 校验和（如果下面的等式成立，则校验成功）</span><br>SUM == (<span class="hljs-number">0x55</span> + <span class="hljs-number">0x53</span> + RollL + RollH + PitchL + PitchH + YawL + YawH + TL + TH)<br></code></pre></div></td></tr></table></figure><h3 id="辅助类型"><a href="#辅助类型" class="headerlink" title="辅助类型"></a>辅助类型</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vector3</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">short</span> X; <span class="hljs-comment">/* 向量的X分量 */</span><br>  <span class="hljs-keyword">short</span> Y; <span class="hljs-comment">/* 向量的Y分量 */</span><br>  <span class="hljs-keyword">short</span> Z; <span class="hljs-comment">/* 向量的Z分量 */</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GyroData</span></span><br><span class="hljs-class">&#123;</span><br>  Vector3 Acceleration;    <span class="hljs-comment">/* 加速度 */</span><br>  Vector3 AngularVelocity; <span class="hljs-comment">/* 角速度 */</span><br>  Vector3 Rotation;        <span class="hljs-comment">/* 旋转 */</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*GyroDataHandler)</span><span class="hljs-params">(GyroData data)</span></span>; <br></code></pre></div></td></tr></table></figure><h3 id="陀螺仪类"><a href="#陀螺仪类" class="headerlink" title="陀螺仪类"></a>陀螺仪类</h3><p>陀螺仪类实现了对陀螺仪数据的读取与校验。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * RX数据缓冲区的长度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RX_BUFFER_LEN 11</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gyro</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建一个陀螺仪传感器的实例</span><br><span class="hljs-comment">   */</span><br>  Gyro(<span class="hljs-keyword">void</span>);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 更新陀螺仪数据</span><br><span class="hljs-comment">   * @param[in] ucData 从串口中读取的一个字节</span><br><span class="hljs-comment">   * @note 这个方法需要在loop函数中不断调用</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ucData)</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 设置用来处理接收完成的陀螺仪数据的函数</span><br><span class="hljs-comment">   * @param[in] handler 陀螺仪数据的处理函数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnFinishReceivingData</span><span class="hljs-params">(GyroDataHandler handler)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>  GyroData dataCache;                      <span class="hljs-comment">/* 陀螺仪数据缓存 */</span><br>  GyroDataHandler dataHandler;             <span class="hljs-comment">/* 陀螺仪数据处理函数 */</span><br>  <span class="hljs-keyword">bool</span> isDataValid;                        <span class="hljs-comment">/* dataCache的数据是否合法 */</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ucRxSum;                   <span class="hljs-comment">/* 从RX读取的字节的和 */</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ucRxCount;                 <span class="hljs-comment">/* 从RX读取的字节数量 */</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ucRxBuffer[RX_BUFFER_LEN]; <span class="hljs-comment">/* RX数据缓冲区 */</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p>实现陀螺仪类的构造方法，对字段进行初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">Gyro::Gyro(<span class="hljs-keyword">void</span>)<br>&#123;<br>  <span class="hljs-keyword">this</span>-&gt;dataHandler = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">this</span>-&gt;isDataValid = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">this</span>-&gt;ucRxSum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">this</span>-&gt;ucRxCount = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// memset(&amp;this-&gt;dataCache, 0, sizeof(GyroData));</span><br>  <span class="hljs-comment">// memset(this-&gt;ucRxBuffer, 0, sizeof(unsigned char) * RX_BUFFER_LEN);</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>实现核心方法 <code>Gyro::Update</code>，处理传入的一个字节的数据，根据协议，完成数据的读取和校验。</p><p>在三组数据读取完成后，如果数据全部校验成功，将会调用设置的回调，即 <code>dataHandler</code> 字段所指向的函数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Gyro::Update</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> ucData)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">this</span>-&gt;ucRxBuffer[<span class="hljs-keyword">this</span>-&gt;ucRxCount++] = ucData;<br><br>  <span class="hljs-keyword">if</span> (ucRxBuffer[<span class="hljs-number">0</span>] != <span class="hljs-number">0x55</span>)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;ucRxCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;ucRxCount &lt; RX_BUFFER_LEN)<br>  &#123;<br>    <span class="hljs-keyword">this</span>-&gt;ucRxSum += ucData;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">// 进入到该分支时，ucData是SUM的值，被写入了缓冲区的[10]</span><br>    <span class="hljs-keyword">bool</span> isValid = (<span class="hljs-keyword">this</span>-&gt;ucRxSum == ucData);<br><br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">this</span>-&gt;ucRxBuffer[<span class="hljs-number">1</span>])<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x51</span>:<br>      <span class="hljs-keyword">this</span>-&gt;isDataValid &amp;= isValid;<br>      <span class="hljs-built_in">memcpy</span>(&amp;<span class="hljs-keyword">this</span>-&gt;dataCache.Acceleration, &amp;ucRxBuffer[<span class="hljs-number">2</span>], <span class="hljs-keyword">sizeof</span>(Vector3));<br>      <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x52</span>:<br>      <span class="hljs-keyword">this</span>-&gt;isDataValid &amp;= isValid;<br>      <span class="hljs-built_in">memcpy</span>(&amp;<span class="hljs-keyword">this</span>-&gt;dataCache.AngularVelocity, &amp;ucRxBuffer[<span class="hljs-number">2</span>], <span class="hljs-keyword">sizeof</span>(Vector3));<br>      <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x53</span>:<br>      <span class="hljs-built_in">memcpy</span>(&amp;<span class="hljs-keyword">this</span>-&gt;dataCache.Rotation, &amp;ucRxBuffer[<span class="hljs-number">2</span>], <span class="hljs-keyword">sizeof</span>(Vector3));<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;dataHandler &amp;&amp; <span class="hljs-keyword">this</span>-&gt;isDataValid &amp;&amp; isValid)<br>      &#123;<br>        <span class="hljs-comment">// 为 dataCache 创建一个防御性副本</span><br>        <span class="hljs-keyword">this</span>-&gt;dataHandler(<span class="hljs-keyword">this</span>-&gt;dataCache); <span class="hljs-comment">// 触发事件</span><br>      &#125;<br><br>      <span class="hljs-keyword">this</span>-&gt;isDataValid = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;ucRxSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">this</span>-&gt;ucRxCount = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>提供一个设置 <code>dataHandler</code> 字段的公共接口。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Gyro::OnFinishReceivingData</span><span class="hljs-params">(GyroDataHandler handler)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">this</span>-&gt;dataHandler = handler;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="读取压力传感器数据"><a href="#读取压力传感器数据" class="headerlink" title="读取压力传感器数据"></a>读取压力传感器数据</h2><p>定义压力传感器类，根据我的需要，设置了6个压力传感器。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 压力传感器的数量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PRESSURE_SENSOR_COUNT 6</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pressures</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 创建一组压力传感器的实例</span><br><span class="hljs-comment">   * @param[in] sensorPins 一个数组，保存所有连接了压力传感器的引脚的编号</span><br><span class="hljs-comment">   */</span><br>  Pressures(<span class="hljs-keyword">uint8_t</span> *sensorPins);<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 从压力传感器中读取数据</span><br><span class="hljs-comment">   * @param[in] buffer 保存数据的缓冲区，其长度应该与压力传感器的数量一致</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ReadData</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> *buffer)</span> <span class="hljs-keyword">const</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-keyword">uint8_t</span> sensorPins[PRESSURE_SENSOR_COUNT]; <span class="hljs-comment">/* 所有连接了压力传感器的引脚的编号 */</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p>实现构造方法，按顺序保存所有压力传感器使用的引脚编号。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">Pressures::Pressures(<span class="hljs-keyword">uint8_t</span> *sensorPins)<br>&#123;<br>  <span class="hljs-built_in">memcpy</span>(<span class="hljs-keyword">this</span>-&gt;sensorPins, sensorPins, PRESSURE_SENSOR_COUNT * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">uint8_t</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>提供读取数据的接口。遍历所有的引脚编号，读取模拟量并保存到缓冲区中。<br>将每一个压力传感器的值转换为16位无符号整数，可以在不丢失数据的前提下，方便后续在 Python 中读取。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pressures::ReadData</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> *buffer)</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; PRESSURE_SENSOR_COUNT; i++)<br>  &#123;<br>    *buffer++ = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span>)analogRead(<span class="hljs-keyword">this</span>-&gt;sensorPins[i]);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="定义-Python-数据包"><a href="#定义-Python-数据包" class="headerlink" title="定义 Python 数据包"></a>定义 Python 数据包</h2><p>发送给 Python 的数据包格式由标识数据、陀螺仪数据、压力传感器数据组成，其定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PyPackage</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> Flag0;                                <span class="hljs-comment">/* 第一个标识 */</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> Flag1;                                <span class="hljs-comment">/* 第二个标识 */</span><br>  GyroData GyroData;                                  <span class="hljs-comment">/* 陀螺仪数据 */</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> PressureData[PRESSURE_SENSOR_COUNT]; <span class="hljs-comment">/* 压力传感器数据 */</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p>我使用如下两个值来作为标识数据：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据包的第一个标识</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PACKAGE_FLAG_0 0x55</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据包的第二个标识</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PACKAGE_FLAG_1 0x59</span><br></code></pre></div></td></tr></table></figure><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BAUDRATE 9600</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DELAY 0</span><br><br>Gyro *gyro;<br>Pressures *pressures;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendPackage</span><span class="hljs-params">(GyroData data)</span></span>;<br></code></pre></div></td></tr></table></figure><p>在 <code>setup</code> 函数中初始化，主要工作如下：</p><ol><li>初始化陀螺仪对象。</li><li>将 <code>SendPackage</code> 设置为陀螺仪数据接收成功的回调函数。</li><li>初始化压力传感器对象。</li><li>以特定的波特率初始化串口。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  gyro = <span class="hljs-keyword">new</span> Gyro();<br>  gyro-&gt;OnFinishReceivingData(SendPackage);<br><br>  <span class="hljs-keyword">uint8_t</span> sensors[PRESSURE_SENSOR_COUNT] = &#123;A0, A1, A2, A3, A4, A5&#125;;<br>  pressures = <span class="hljs-keyword">new</span> Pressures(sensors);<br><br>  Serial.begin(BAUDRATE);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后，在 <code>loop</code> 中更新陀螺仪的数据，再做适当的延迟。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">while</span> (Serial.available())<br>  &#123;<br>    gyro-&gt;Update(Serial.read());<br>  &#125;<br><br>  delay(DELAY);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后，实现 Python 数据包的发送。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SendPackage</span><span class="hljs-params">(GyroData data)</span></span><br><span class="hljs-function"></span>&#123;<br>  PyPackage package;<br><br>  package.Flag0 = PACKAGE_FLAG_0;<br>  package.Flag1 = PACKAGE_FLAG_1;<br>  package.GyroData = data;<br>  pressures-&gt;ReadData(package.PressureData);<br><br>  Serial.write((<span class="hljs-keyword">char</span> *)&amp;package, <span class="hljs-keyword">sizeof</span>(PyPackage));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到这里，Arduino 部分已经完成！接下来就是在 Python 中接收数据。</p><h1 id="Python-部分"><a href="#Python-部分" class="headerlink" title="Python 部分"></a>Python 部分</h1><p>Python 部分的代码，主要实现了 Arduino 数据包的接收和解析。</p><h2 id="二进制流"><a href="#二进制流" class="headerlink" title="二进制流"></a>二进制流</h2><p>定义 <code>CStream</code> 类，从字节数组中解析数据。</p><h3 id="声明基本方法"><a href="#声明基本方法" class="headerlink" title="声明基本方法"></a>声明基本方法</h3><p>声明 <code>__init__</code> 和 <code>__len__</code> 方法。<br><code>__init__</code> 方法接受一个字节序列 <code>cbytes</code> 作为参数，后续的解析将基于这个序列中的数据来进行。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CStream</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cbytes: <span class="hljs-built_in">bytes</span></span>):</span><br>    self.__cbytes = cbytes<br>    self.__index = <span class="hljs-number">0</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.__cbytes)<br></code></pre></div></td></tr></table></figure><p>根据之前在 Arduino 中编写的代码，我们知道：数据包包体（不包括前两个标识字节）中的每一个数（包括向量的每一个分量）都由两个字节组成，而且使用<a href="https://baike.baidu.com/item/Little-Endian/4118225?fr=aladdin">小字节序（Little-Endian）</a>。</p><p>因此，我们声明一个方法，从字节序列中向后读取两个字节，并按低位字节和高位字节的顺序返回。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__readTwoBytes</span>(<span class="hljs-params">self</span>):</span><br>  low = self.__cbytes[self.__index]<br>  high = self.__cbytes[self.__index + <span class="hljs-number">1</span>]<br>  self.__index += <span class="hljs-number">2</span><br>  <span class="hljs-keyword">return</span> low, high<br></code></pre></div></td></tr></table></figure><h3 id="读取整数"><a href="#读取整数" class="headerlink" title="读取整数"></a>读取整数</h3><p>首先，读取整数的低位字节和高位字节，分别记为 <code>low</code> 和 <code>high</code>。</p><blockquote><p>因为从 Arduino 发送的整数都由两个字节组成，而 Python 的 <code>int</code> 类型占用的字节数大于2，所以当整数有符号时， <code>(high &lt;&lt; 8) | low</code> 运算会将它的符号位当做数值位处理，导致结果不一定是正确的。</p></blockquote><p>读取有符号整数时，先忽略高位字节中的符号位，进行移位运算：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">v = ((high &amp; <span class="hljs-number">0x7F</span>) &lt;&lt; <span class="hljs-number">8</span>) | low<br></code></pre></div></td></tr></table></figure><p>对原始数据的符号做判断：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">sign = ((high &gt;&gt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">0x1</span>)<br><span class="hljs-comment"># sign == 0 表示正数</span><br><span class="hljs-comment"># sign == 1 表示负数</span><br></code></pre></div></td></tr></table></figure><p>如果是负数的话，还需要额外的运算。负数的储存形式是：相应正数按位取反再加1。使用它的逆运算就可以得到原始数值：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">-((~(v - <span class="hljs-number">1</span>)) &amp; <span class="hljs-number">0x7FFF</span>)<br></code></pre></div></td></tr></table></figure><p>读取无符号整数时，直接进行移位运算即可。</p><p>最后，整理成一个方法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readInt</span>(<span class="hljs-params">self, signed=<span class="hljs-literal">True</span></span>):</span><br>  low, high = self.__readTwoBytes()<br><br>  <span class="hljs-keyword">if</span> signed:<br>    v = ((high &amp; <span class="hljs-number">0x7F</span>) &lt;&lt; <span class="hljs-number">8</span>) | low<br>    <span class="hljs-keyword">return</span> v <span class="hljs-keyword">if</span> (high &amp; <span class="hljs-number">0x80</span>) == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -((~(v - <span class="hljs-number">1</span>)) &amp; <span class="hljs-number">0x7FFF</span>)<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> (high &lt;&lt; <span class="hljs-number">8</span>) | low<br></code></pre></div></td></tr></table></figure><p>注：有符号整数的读取也可以使用 <code>ctypes</code> 模块中的类来完成。</p><h3 id="读取浮点数"><a href="#读取浮点数" class="headerlink" title="读取浮点数"></a>读取浮点数</h3><p>从数据协议中可以发现：绝大部分的整数都会除以32768（2的15次方，即16位有符号整数的最大值）然后转换为浮点数，再进行其他运算。故可以封装一个方法来完成这步操作。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readFloat</span>(<span class="hljs-params">self</span>):</span><br>  <span class="hljs-keyword">return</span> self.readInt(signed=<span class="hljs-literal">True</span>) / <span class="hljs-number">32768.0</span><br></code></pre></div></td></tr></table></figure><h3 id="读取向量"><a href="#读取向量" class="headerlink" title="读取向量"></a>读取向量</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readIntVec</span>(<span class="hljs-params">self, elementDecorator, dimension=<span class="hljs-number">3</span>, signed=<span class="hljs-literal">True</span></span>):</span><br>  <span class="hljs-keyword">return</span> [<br>    elementDecorator(i, self.readInt(signed=signed))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(dimension)<br>  ]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readFloatVec</span>(<span class="hljs-params">self, elementDecorator, dimension=<span class="hljs-number">3</span></span>):</span><br>  <span class="hljs-keyword">return</span> [<br>    elementDecorator(i, self.readFloat())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(dimension)<br>  ]<br></code></pre></div></td></tr></table></figure><h2 id="定义数据包"><a href="#定义数据包" class="headerlink" title="定义数据包"></a>定义数据包</h2><p>根据 Arduino 端的代码来进行定义。因为标识数据只是在接收数据包时使用的，所以不需要增加这个字段。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArduinoPackage</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, acceleration, angularVelocity, rotation, leftPressures, rightPressures</span>):</span><br>    self.acceleration = acceleration<br>    self.angularVelocity = angularVelocity<br>    self.rotation = rotation<br>    self.leftPressures = leftPressures<br>    self.rightPressures = rightPressures<br></code></pre></div></td></tr></table></figure><h2 id="接收数据包"><a href="#接收数据包" class="headerlink" title="接收数据包"></a>接收数据包</h2><p>定义 <code>ArduinoReader</code> 类，从串口中接收数据包。</p><h3 id="声明基本方法-1"><a href="#声明基本方法-1" class="headerlink" title="声明基本方法"></a>声明基本方法</h3><p>对字段做初始化，并提供上下文管理器和一些公共方法。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> serial <span class="hljs-keyword">import</span> Serial <span class="hljs-comment"># 需要安装 pyserial 模块</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArduinoReader</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, **kwargs</span>):</span><br>    port = kwargs.get(<span class="hljs-string">&#x27;port&#x27;</span>, <span class="hljs-literal">None</span>)<br>    baudrate = kwargs.get(<span class="hljs-string">&#x27;baudrate&#x27;</span>, <span class="hljs-number">9600</span>)<br>    timeout = kwargs.get(<span class="hljs-string">&#x27;timeout&#x27;</span>, <span class="hljs-number">1</span>)<br>    <br>    self.__serial = Serial(port=port, baudrate=baudrate, timeout=timeout)<br>    self.gravity = kwargs.get(<span class="hljs-string">&#x27;gravity&#x27;</span>, <span class="hljs-number">9.8</span>)<br>    self.packageFlag0 = kwargs.get(<span class="hljs-string">&#x27;packageFlag0&#x27;</span>, <span class="hljs-number">0x55</span>)<br>    self.packageFlag1 = kwargs.get(<span class="hljs-string">&#x27;packageFlag1&#x27;</span>, <span class="hljs-number">0x59</span>)<br>    self.packageBodySize = kwargs.get(<span class="hljs-string">&#x27;packageBodySize&#x27;</span>, <span class="hljs-number">30</span>)<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open</span>(<span class="hljs-params">self</span>):</span><br>    self.__serial.<span class="hljs-built_in">open</span>()<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close</span>(<span class="hljs-params">self</span>):</span><br>    self.__serial.close()<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span>(<span class="hljs-params">self</span>):</span><br>    self.__serial.__enter__()<br>    <span class="hljs-keyword">return</span> self<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span>(<span class="hljs-params">self, extype, value, trace</span>):</span><br>    self.__serial.__exit__(extype, value, trace)<br><br><span class="hljs-meta">  @property</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">canRead</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-keyword">return</span> self.__serial.is_open<br></code></pre></div></td></tr></table></figure><h3 id="检验标识数据"><a href="#检验标识数据" class="headerlink" title="检验标识数据"></a>检验标识数据</h3><p>阻塞当前线程，不断从串口中读取两个字节，与预设的标识字节做比较，相等时从方法中返回，准备读取包体。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__readSingleByte</span>(<span class="hljs-params">self</span>):</span><br>  data = self.__serial.read(<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">return</span> data[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__checkPackageFlags</span>(<span class="hljs-params">self</span>):</span><br>  previous = self.__readSingleByte()<br><br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    current = self.__readSingleByte()<br>    <span class="hljs-comment"># 前面两个字节是标识位</span><br>    <span class="hljs-keyword">if</span> previous == self.packageFlag0 <span class="hljs-keyword">and</span> current == self.packageFlag1:<br>      <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>      previous = current<br></code></pre></div></td></tr></table></figure><h3 id="解析为-Python-对象"><a href="#解析为-Python-对象" class="headerlink" title="解析为 Python 对象"></a>解析为 Python 对象</h3><p>从串口中读取一定数量的字节，利用 <code>CStream</code> 解析字节序列中的内容，最后创建一个 <code>ArduinoPackage</code> 对象并返回。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__makePackage</span>(<span class="hljs-params">self, cbytes</span>):</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(cbytes) != self.packageBodySize:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>  stream = CStream(cbytes)<br><br>  accel = stream.readFloatVec(<span class="hljs-keyword">lambda</span> i, v: <span class="hljs-built_in">round</span>(v * <span class="hljs-number">16</span> * self.gravity, <span class="hljs-number">4</span>))<br>  angularV = stream.readFloatVec(<span class="hljs-keyword">lambda</span> i, v: <span class="hljs-built_in">round</span>(v * <span class="hljs-number">2000</span>, <span class="hljs-number">4</span>))<br>  rotation = stream.readFloatVec(<span class="hljs-keyword">lambda</span> i, v: <span class="hljs-built_in">round</span>(v * <span class="hljs-number">180</span>, <span class="hljs-number">4</span>))<br>  <br>  left = stream.readIntVec(<span class="hljs-keyword">lambda</span> i, v: (v), signed=<span class="hljs-literal">False</span>)<br>  right = stream.readIntVec(<span class="hljs-keyword">lambda</span> i, v: (v), signed=<span class="hljs-literal">False</span>)<br><br>  <span class="hljs-keyword">return</span> ArduinoPackage(accel, angularV, rotation, left, right)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>(<span class="hljs-params">self</span>):</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.canRead:<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>  self.__checkPackageFlags()<br>  cbytes = self.__serial.read(self.packageBodySize)<br>  <span class="hljs-keyword">return</span> self.__makePackage(cbytes)<br></code></pre></div></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> arduino_reader <span class="hljs-keyword">import</span> ArduinoReader<br><br>arduinoConfig = &#123;<br>  <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;COM6&quot;</span>,<br>  <span class="hljs-string">&quot;baudrate&quot;</span>: <span class="hljs-number">9600</span>,<br>  <span class="hljs-string">&quot;timeout&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;gravity&quot;</span>: <span class="hljs-number">9.8</span>,<br>  <span class="hljs-string">&quot;packageFlag0&quot;</span>: <span class="hljs-number">0x55</span>,<br>  <span class="hljs-string">&quot;packageFlag1&quot;</span>: <span class="hljs-number">0x59</span>,<br>  <span class="hljs-string">&quot;packageBodySize&quot;</span>: <span class="hljs-number">30</span><br>&#125;<br><br><span class="hljs-keyword">with</span> ArduinoReader(**arduinoConfig) <span class="hljs-keyword">as</span> reader:<br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    package = reader.read()<br>    <span class="hljs-comment"># ...</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>嵌入式开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>Python</tag>
      
      <tag>Arduino</tag>
      
      <tag>JY61P</tag>
      
      <tag>串口通信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 VSCode 开发 Arduino</title>
    <link href="/posts/3d688237/"/>
    <url>/posts/3d688237/</url>
    
    <content type="html"><![CDATA[<h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><p>VSCode 全称 Visual Studio Code，是微软推出的一款轻量级代码编辑器，免费、开源而且功能强大。它几乎支持所有主流的程序语言，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Windows、Mac OS X 以及 Linux。</p><p>VSCode 可以在其<a href="https://code.visualstudio.com/">官网</a>下载。</p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>在商店中下载 <code>Arduino</code> 插件，注意要下载发布者为 Microsoft 的插件。</p><p><img src="https://cdn.jsdelivr.net/gh/Jin-Yuhan/WebAssetStorage@latest/img/vscode_arduino.png" alt="下载 Arduino 插件"></p><p>点击 <code>文件&gt;首选项&gt;设置</code>，打开 VSCode 配置文件，添加 Arduino IDE 路径配置，如：</p><p><img src="https://cdn.jsdelivr.net/gh/Jin-Yuhan/WebAssetStorage@latest/img/vscode_arduino插件配置.png" alt="Arduino IDE 路径配置"></p><p><strong>此路径为 Arduino 文件夹的路径</strong>，下面这种路径配置是错误的：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;arduino.path&quot;</span>: <span class="hljs-string">&quot;D:\\Arduino\\arduino.exe&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>接下来安装 <code>C/C++</code> 插件，这个插件可以不做配置。</p><h1 id="Arduino-设置"><a href="#Arduino-设置" class="headerlink" title="Arduino 设置"></a>Arduino 设置</h1><p>点击 <code>文件&gt;首选项&gt;设置</code>：</p><ol><li><p>在 Arduino IDE 的安装目录下新建一个文件夹，并将 <code>项目文件夹位置</code> 设置为这个文件夹的路径。这样，我们通过 Arduino IDE 下载的第三方库文件都会放在这个文件夹，方便我们管理。</p></li><li><p>修改 <code>编辑器语言</code> 为 <code>English</code>。由于大部分人的电脑系统是中文的，如果不设置为英文，VSCode 打印出来的信息会乱码。</p></li><li><p>勾选 <code>使用外部编辑器</code>。这样就不可以在 Arduino IDE 中修改代码了。</p></li></ol><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>新建一个 Arduino 源文件 <code>test.ino</code>，输入如下内容：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>  pinMode(<span class="hljs-number">13</span>, OUTPUT);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>  digitalWrite(<span class="hljs-number">13</span>, HIGH);<br>  delay(<span class="hljs-number">500</span>);<br>  digitalWrite(<span class="hljs-number">13</span>, LOW);<br>  delay(<span class="hljs-number">500</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在 VSCode 窗口的右下方，设置开发板类型、端口号等配置：</p><p><img src="https://cdn.jsdelivr.net/gh/Jin-Yuhan/WebAssetStorage@latest/img/vscode_arduino插件窗口下方配置.png" alt="配置"></p><p>然后可以点击右上角的按钮进行编译和上传:</p><p><img src="https://cdn.jsdelivr.net/gh/Jin-Yuhan/WebAssetStorage@latest/img/vscode_arduino插件窗口上方按钮.png" alt="上传"></p><p>也可以使用下面的快捷键：</p><ul><li><code>Ctrl+Alt+U</code>：编译并上传</li><li><code>Ctrl+Alt+R</code>：进行编译验证</li></ul>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 GitHub Actions 自动部署 Hexo 博客至 GitHub Pages</title>
    <link href="/posts/13dfd8f4/"/>
    <url>/posts/13dfd8f4/</url>
    
    <content type="html"><![CDATA[<h1 id="简介-GitHub-Actions"><a href="#简介-GitHub-Actions" class="headerlink" title="简介 GitHub Actions"></a>简介 GitHub Actions</h1><p>GitHub Actions 是 GitHub 官方推出的持续集成/部署模块服务（CI / CD），只需一个配置文件即可自动开启服务，而且自带云环境运行。</p><div class="table-container"><table><thead><tr><th style="text-align:center">概念</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">workflow</td><td style="text-align:center">持续集成一次运行的过程</td></tr><tr><td style="text-align:center">job</td><td style="text-align:center">一个 workflow 由一个或多个 job 构成</td></tr><tr><td style="text-align:center">step</td><td style="text-align:center">每个 job 由多个 step 构成，一步步完成</td></tr><tr><td style="text-align:center">action</td><td style="text-align:center">每个 step 可以依次执行一个或多个 action</td></tr></tbody></table></div><h1 id="配置-hexo-deploy"><a href="#配置-hexo-deploy" class="headerlink" title="配置 hexo deploy"></a>配置 hexo deploy</h1><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>在 Hexo 的 <code>_config.yml</code> 中加入以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br>  <span class="hljs-attr">message:</span> [<span class="hljs-string">message</span>]<br></code></pre></div></td></tr></table></figure><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><p>在GitHub中创建一个代码仓库，随后将网站的源文件提交至该仓库中。</p><p><img src="https://cdn.jsdelivr.net/gh/Jin-Yuhan/WebAssetStorage@latest/img/自动化博客_提交源文件至仓库.png" alt="提交源文件"></p><h1 id="配置-SSH-Key"><a href="#配置-SSH-Key" class="headerlink" title="配置 SSH Key"></a>配置 SSH Key</h1><p>打开 Git Bash 命令行窗口，检查是否已有 SSH Key。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~/.ssh<br></code></pre></div></td></tr></table></figure><p>如果提示没有的话，输入下方代码生成。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;example@email.com&quot;</span><br></code></pre></div></td></tr></table></figure><p>SSH Key 准备完毕后，首先复制<strong>秘钥</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ clip &lt; ~/.ssh/id_rsa<br></code></pre></div></td></tr></table></figure><p>然后在之前创建的<strong>源文件仓库</strong> <code>Settings&gt;Secrets</code> 中创建一个名为 <code>SSH_PRIVATE</code> 的 Secrets，并将 Value 设置为<strong>秘钥的值</strong>。</p><p>接着复制<strong>公钥</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ clip &lt; ~/.ssh/id_rsa.pub<br></code></pre></div></td></tr></table></figure><p>在<strong>网站仓库</strong> <code>Settings&gt;Deploy Keys</code> 中添加一个 Deploy Key，名称任意，并将 Key 设置为<strong>公钥的值</strong>。</p><h1 id="创建-workflow"><a href="#创建-workflow" class="headerlink" title="创建 workflow"></a>创建 workflow</h1><p>在博客目录下创建 <code>.github/workflows/xxx.yml</code> 文件，文件名任意。</p><p>文件内容如下<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://hexo.fluid-dev.com/posts/actions-deploy/">[1]</span></a></sup>，可以根据自己的需要增减步骤。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span>                      <span class="hljs-comment"># Actions 显示的名字，随意设置</span><br><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]                        <span class="hljs-comment"># 监听到 push 事件后触发</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span>              <span class="hljs-comment"># 拉取当前执行 Actions 仓库的指定分支</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Submodule</span>      <span class="hljs-comment"># 如果仓库有 submodule，在这里更新，没有则删掉此步骤</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">init</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">update</span> <span class="hljs-string">--remote</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span>            <span class="hljs-comment"># 安装 Node 环境</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;10.x&quot;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Generate</span>         <span class="hljs-comment"># 安装 Hexo 依赖并且生成静态文件</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">rm</span> <span class="hljs-string">-f</span> <span class="hljs-string">.yarnclean</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">--frozen-lockfile</span> <span class="hljs-string">--ignore-engines</span> <span class="hljs-string">--ignore-optional</span> <span class="hljs-string">--non-interactive</span> <span class="hljs-string">--silent</span> <span class="hljs-string">--ignore-scripts</span> <span class="hljs-string">--production=false</span><br>        <span class="hljs-string">rm</span> <span class="hljs-string">-rf</span> <span class="hljs-string">./public</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">run</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">run</span> <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span>           <span class="hljs-comment"># 部署步骤，这里以 hexo deploy 为例</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">SSH_PRIVATE:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">yourname</span>        <span class="hljs-comment"># 在此处填写GitHub的用户名</span><br>        <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">your@email.com</span> <span class="hljs-comment"># 在此处填写邮箱</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">~/.ssh/</span><br>        <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$SSH_PRIVATE&quot;</span> <span class="hljs-string">|</span> <span class="hljs-string">tr</span> <span class="hljs-string">-d</span> <span class="hljs-string">&#x27;\r&#x27;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>        <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>        <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">github.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&quot;$GIT_NAME&quot;</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&quot;$GIT_EMAIL&quot;</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">run</span> <span class="hljs-string">hexo</span> <span class="hljs-string">deploy</span><br></code></pre></div></td></tr></table></figure><p>文件中的 <code>GIT_NAME</code> 和 <code>GIT_EMAIL</code> 需要自行修改。<br>至此就已经配置好了。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>当我们提交修改后，GitHub就会自动执行配置好的步骤，完成博客的部署。</p><p><img src="https://cdn.jsdelivr.net/gh/Jin-Yuhan/WebAssetStorage@latest/img/github_actions_hexo_自动化部署_运行实例.png" alt="自动化流程"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在执行 Hexo Deploy 时，可能会出现这样的报错：</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">fatal: could not read Username for &#x27;https://github.com&#x27;: No such device or address<br></code></pre></div></td></tr></table></figure><p>解决方案：修改 hexo deploy 的配置。在 <code>_config.yml</code> 中</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span> <span class="hljs-comment"># 改为此格式：https://userName:password@github.com/username/project.git</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br>  <span class="hljs-attr">message:</span> [<span class="hljs-string">message</span>]<br></code></pre></div></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/posts/actions-deploy/">https://hexo.fluid-dev.com/posts/actions-deploy/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub Pages</tag>
      
      <tag>GitHub Actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计数原理、排列组合、概率论初步</title>
    <link href="/posts/2140af2c/"/>
    <url>/posts/2140af2c/</url>
    
    <content type="html"><![CDATA[<h1 id="计数原理"><a href="#计数原理" class="headerlink" title="计数原理"></a>计数原理</h1><h2 id="乘法原理"><a href="#乘法原理" class="headerlink" title="乘法原理"></a>乘法原理</h2><p>如果完成一件事需要$n$个步骤，第$1$步有$m_1$种不同的方法，第$2$步有$m_2$种不同的方法，……，第$n$步有$m_n$种不同方法，那么完成这件事共有</p><script type="math/tex; mode=display">N=m_1m_2...m_n</script><p>种不同方法。</p><p><strong><span style="color:red;">注意：必须依次通过每一步骤，才算完成一件事！</span></strong></p><h2 id="加法原理"><a href="#加法原理" class="headerlink" title="加法原理"></a>加法原理</h2><p>如果完成一件事有$n$类办法，在第$1$类办法中有$m_1$种不同的方法，在第$2$类办法中有$m_2$种不同的方法，……，在第$n$类办法中有$m_n$种不同的方法，那么完成这件事共有</p><script type="math/tex; mode=display">N=m_1+m_2+...+m_n</script><p>种不同方法。</p><hr><h1 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h1><h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><ul><li><p>一般地，从$n$个<strong>不同元素</strong>中取出$m(m \le n)$个元素，按照<strong>一定的次序</strong>排成一列，叫做：从$n$个不同元素中取出$m$个元素的一个排列。</p></li><li><p>从$n$个<strong>不同元素</strong>中取出$m(m \le n)$个元素的所有排列的个数叫做：从$n$个不同元素中取出$m$个元素的排列数，用符号$P^m_n$或$A^m_n$表示。</p></li></ul><p>根据乘法原理，可知从$n$个元素中取出的第$m(m \le n)$个元素有$n-m+1$种可能，于是一共有</p><script type="math/tex; mode=display">n(n-1)(n-2)...(n-m+1)={n!\over(n-m)!}</script><p>种可能。</p><p>因此，</p><script type="math/tex; mode=display">A_n^m={n!\over(n-m)!}</script><p>为排列数公式。</p><p>另外，$n$个不同元素全部取出的一个排列，叫$n$个元素的一个全排列。此时$m=n$，有</p><script type="math/tex; mode=display">A_n^n={n!\over 0!}=n!</script><h3 id="排列恒等式"><a href="#排列恒等式" class="headerlink" title="排列恒等式"></a>排列恒等式</h3><script type="math/tex; mode=display">\begin{aligned}A^m_n&=(n-m+1)A^{m-1}_n\\\\A^m_n&={n\over n-m} A^m_{n-1}\\\\A^m_n&=nA^{m-1}_{n-1} \\\\nA^n_n&=A^{n+1}_{n+1}-A^n_n\\\\A^m_{n+1}&=A^m_n+mA^{m-1}_n\end{aligned}</script><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><ul><li><p>一般地，从$n$个<strong>不同元素</strong>中取出$m(m \le n)$个元素，组成一组，叫做：从$n$个不同元素中取出$m$个元素的一个组合。</p></li><li><p>从$n$个<strong>不同元素</strong>中取出$m(m \le n)$个元素的所有组合的个数叫做：从$n$个不同元素中取出$m$个元素的组合数，用符号$C^m_n$表示。</p></li></ul><p>从$n$个不同元素中取出$m$个元素的组合数，可以看做，用从$n$个不同元素中取出$m$个元素的排列数，除以，$m$个不同元素的全排列数，即</p><script type="math/tex; mode=display">C_n^m={A_n^m \over A_m^m}=\frac{n!}{m!(n-m)!}</script><p>其中，$m \le n$。这个公式叫组合数公式。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><script type="math/tex; mode=display">\begin{aligned}C_n^m&=C_n^{n-m}\\\\C_m^{n+1}&=C_n^m+C_n^{m-1}\\\\C_n^0&=1\end{aligned}</script><h3 id="组合恒等式"><a href="#组合恒等式" class="headerlink" title="组合恒等式"></a>组合恒等式</h3><script type="math/tex; mode=display">\begin{aligned}C_n^m&=\frac{n-m+1}{m}C_n^{m-1}\\\\C_n^m&=\frac{n}{n-m}C_{n-1}^{m}\\\\C_n^m&=\frac{n}{m}C_{n-1}^{m-1}\end{aligned}</script><h2 id="排列数与组合数"><a href="#排列数与组合数" class="headerlink" title="排列数与组合数"></a>排列数与组合数</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>排列与元素的次序有关，而组合与元素的次序无关。</p><h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><script type="math/tex; mode=display">A_n^m=m!C_n^m</script><hr><h1 id="概率论初步"><a href="#概率论初步" class="headerlink" title="概率论初步"></a>概率论初步</h1><ul><li><p><strong>概率论：</strong>研究随机现象数量规律的数学分支。</p></li><li><p><strong>试验：</strong>在概率论中，掷骰子、转硬币……都叫试验。</p></li><li><p><strong>基本事件：</strong>一次试验可能出现的结果。</p></li><li><p><strong>随机事件：</strong>试验的结果，简称事件。包括基本事件。用大写字母$A$、$B$等表示。</p></li><li><p><strong>随机现象：</strong>对于在一定条件下可能出现也可能不出现，且有统计规律性的现象。</p></li><li><p>随机事件$A$出现的概率记作$P(A)$。</p></li></ul><h2 id="古典概型"><a href="#古典概型" class="headerlink" title="古典概型"></a>古典概型</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>一次试验可能出现的基本事件只有有限个。</li><li>每个基本事件出现的可能性相等。</li></ol><h3 id="事件出现的概率"><a href="#事件出现的概率" class="headerlink" title="事件出现的概率"></a>事件出现的概率</h3><p>在古典概型中，事件$A$出现的概率定义为</p><script type="math/tex; mode=display">P(A)=\frac{\text{事件}A\text{所包含的基本事件数}}{\text{试验中所有的基本事件数}}</script><p>用集合语言表示，设$\omega_1$，$\omega_2$，…，$\omega_n$表示所有的基本事件，基本事件的集合记为</p><script type="math/tex; mode=display">\Omega=\{ \omega_1, \omega_2,...,\omega_n \}</script><p>则</p><script type="math/tex; mode=display">P(A)=\frac{A\text{所包含的}\omega\text{的个数}}{\Omega\text{中元素}\omega\text{的总个数}}</script><blockquote><p>$\Omega$既表示基本事件的集合，又可以看做是一个特殊的随机事件，它包含了所有的基本事件，因此它是必然事件。</p></blockquote><p>我们把试验后必定出现的事件叫做<strong>必然事件</strong>，记作$\Omega$，把不可能出现的事件叫做<strong>不可能事件</strong>，记作$\emptyset$。</p><p>注意：</p><ol><li>不可能事件的概率为零，即$P(\emptyset)=0$</li><li>必然事件的概率为$1$，即$P(\Omega)=1$</li><li>对任意随机事件$E$，有$0\le P(E)\le 1$</li><li>若$\Omega=\{ \omega_1, \omega_2,…,\omega_n \}$，则$P(\omega_1)+P(\omega_2)+…+P(\omega_n)=1$</li></ol><h3 id="对立事件"><a href="#对立事件" class="headerlink" title="对立事件"></a>对立事件</h3><p>设$E$和$F$是两个随机事件，若$E$和$F$满足下列条件：</p><ol><li>$E\cup F=\Omega$</li><li>$E\cap F=\emptyset$</li></ol><p>则$E$和$F$叫做对立事件。</p><p>在任何一次试验中，事件$A$要么出现，要么不出现，如果把事件$A$不出现记作事件$\overline{A}$，那么它们互为对立事件，且</p><script type="math/tex; mode=display">P(A)+P(\overline{A})=1</script><p>其中$\overline{A}$也可以用集合语言表示为</p><script type="math/tex; mode=display">\overline{A}=\{\omega\ |\ \omega \in \Omega,\ \omega \notin A \}=\complement_\Omega A</script><h2 id="频率与概率"><a href="#频率与概率" class="headerlink" title="频率与概率"></a>频率与概率</h2><h3 id="频率"><a href="#频率" class="headerlink" title="频率"></a>频率</h3><p>对于随机事件$E$，如果在$n$次试验中出现了$m(0 \le m \le n)$次，那么$m$称为事件$E$出现的频数，$\frac{m}{n}$称为事件$E$出现的频率。</p><ul><li>在实际中可以把频率作为概率（的估计值）来应用。</li><li>频率也叫经验概率，计算频率通常是为了估计概率。</li></ul><h3 id="频率稳定性（随机现象的统计规律性）"><a href="#频率稳定性（随机现象的统计规律性）" class="headerlink" title="频率稳定性（随机现象的统计规律性）"></a>频率稳定性（随机现象的统计规律性）</h3><ol><li>在大量试验中，事件出现的频率与其概率很接近。</li><li>当试验次数无限增大时，事件出现的频率与概率相差较大的的可能性趋近于$0$。</li></ol><blockquote><p>频率稳定性说明随机事件出现的可能性大小是随机事件本身固有的，是不随人们的意志转移的。</p></blockquote><p><strong><span style="color:red;">注意：在通常意义下，概率不是试验次数无限增大时频率的极限！！！</span></strong></p><h3 id="大数定律"><a href="#大数定律" class="headerlink" title="大数定律"></a>大数定律</h3><p>频率在大数次试验中稳定于某一常数（概率）。</p><h2 id="几何概型"><a href="#几何概型" class="headerlink" title="几何概型"></a>几何概型</h2><p>在几何概型中，事件$A$出现的概率定义为</p><script type="math/tex; mode=display">P(A)=\frac{A\text{出现区域或区间的几何度量}}{\text{所考察的整个区域或区间的几何度量}}</script><ul><li><strong>几何度量：</strong>区间长度或图形面积。</li></ul><h2 id="事件-A-与事件-B-的和"><a href="#事件-A-与事件-B-的和" class="headerlink" title="事件$A$与事件$B$的和"></a>事件$A$与事件$B$的和</h2><p>设$A$、$B$为两个随机事件，把 <strong>事件$A$与事件$B$至少有一个出现</strong> 叫做事件$A$与事件$B$的和。<br>它也是一个随机事件，记作$A\cup B$。也可以说成：事件$A$或事件$B$出现。</p><h2 id="事件-A-与事件-B-的积"><a href="#事件-A-与事件-B-的积" class="headerlink" title="事件$A$与事件$B$的积"></a>事件$A$与事件$B$的积</h2><p>设$A$、$B$为两个随机事件，把 <strong>事件$A$与事件$B$同时出现</strong> 叫做事件$A$与事件$B$的积。<br>它也是一个随机事件，记作$A\cap B$或$AB$。</p><h2 id="互不相容事件（互斥事件）"><a href="#互不相容事件（互斥事件）" class="headerlink" title="互不相容事件（互斥事件）"></a>互不相容事件（互斥事件）</h2><p>不可能同时出现的两个事件叫做互不相容事件或互斥事件。<br>相互对立的两个事件是互不相容的。</p><h2 id="概率加法公式"><a href="#概率加法公式" class="headerlink" title="概率加法公式"></a>概率加法公式</h2><p>一般地，事件$A$与事件$B$的和的概率等于事件$A$出现的概率，加上事件$B$出现的概率，减去事件$A$、$B$同时出现的概率，即</p><script type="math/tex; mode=display">P(A\cup B)=P(A)+P(B)-P(AB)</script><p>若$A$与$B$是互不相容事件，那么事件$A$与事件$B$的和的概率等于它们的概率和，即</p><script type="math/tex; mode=display">P(A\cup B)=P(A)+P(B)</script><h2 id="独立事件积的概率公式"><a href="#独立事件积的概率公式" class="headerlink" title="独立事件积的概率公式"></a>独立事件积的概率公式</h2><p>对于事件$A$及$B$，如果</p><script type="math/tex; mode=display">P(AB)=P(A)\cdot P(B)</script><p>那么称事件$A$与事件$B$是统计独立的，简称独立的，也称$A$与$B$相互独立。</p><p>同时，上式为独立事件积的概率公式。</p><p>根据定义，可以证明：如果事件$A$与事件$B$相互独立，$A$的对立事件为$\overline{A}$、$B$的对立事件为$\overline{B}$，那么$\overline{A}$与$B$、$A$与$\overline{B}$、$\overline{A}$与$\overline{B}$也相互独立。</p>]]></content>
    
    
    <categories>
      
      <category>高考</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计数原理</tag>
      
      <tag>排列组合</tag>
      
      <tag>概率论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>樱花动漫爬虫</title>
    <link href="/posts/b6dc2c/"/>
    <url>/posts/b6dc2c/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>现在，樱花动漫上广告（色情）非常多，借助下面的代码就可以让我们在命令行中下载动漫，然后在本地进行观看。</p><p>下载的视频文件默认保存在代码所在目录下的<code>animations/animation_name/episode_number.mp4</code>。其中 <code>animation_name</code> 是动漫的全名，<code>episode_number</code> 是对应的集数。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码其实很好懂，就不写详细的注释了。不过，最好就着樱花动漫网站的源码食用，否则不可能看得懂，不过真的有人会仔细看嘛？（笑）</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><br><br>REQUEST_TIMEOUT = <span class="hljs-number">20</span><br>DOWNLOAD_CHUNK_SIZE = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animation</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a</span>):</span><br>        self.title = a[<span class="hljs-string">&#x27;title&#x27;</span>]<br>        self.number = a[<span class="hljs-string">&#x27;href&#x27;</span>].replace(<span class="hljs-string">&#x27;/view/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;.html&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAnimationList</span>(<span class="hljs-params">searchRequest</span>):</span><br>    soup = BeautifulSoup(searchRequest.content.decode(<span class="hljs-string">&quot;gbk&quot;</span>).encode(<span class="hljs-string">&quot;utf-8&quot;</span>), <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    divs = soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;pics&#x27;</span>&#125;)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(divs) == <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;无法获取动漫列表！&#x27;</span><br>    <span class="hljs-keyword">return</span> [Animation(li.h2.a) <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> divs[<span class="hljs-number">0</span>].ul.find_all(<span class="hljs-string">&#x27;li&#x27;</span>)]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selectAnimation</span>(<span class="hljs-params">animationList</span>):</span><br>    animationCount = <span class="hljs-built_in">len</span>(animationList)<br>    <span class="hljs-keyword">assert</span> animationCount &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;未找到动漫&quot;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(animationCount):<br>        print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>.<span class="hljs-subst">&#123;animationList[i].title&#125;</span>&quot;</span>)<br><br>    index = -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> index &gt;= animationCount <span class="hljs-keyword">or</span> index &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">try</span>:<br>            index = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;选择一个: &#x27;</span>)) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span> animationList[index]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getEpisodeList</span>(<span class="hljs-params">animation</span>):</span><br>    r = requests.get(<span class="hljs-string">f&#x27;http://www.imomoe.in/player/<span class="hljs-subst">&#123;animation.number&#125;</span>-0-0.html&#x27;</span>, timeout=REQUEST_TIMEOUT)<br>    match = re.search(<span class="hljs-string">r&#x27;&quot;(/playdata/(\d+)/(\d+)(\.)js(\?)(\d+)(\.)(\d+))&quot;&#x27;</span>, r.content.decode(<span class="hljs-string">&quot;gbk&quot;</span>))<br>    <span class="hljs-keyword">assert</span> match, <span class="hljs-string">&#x27;无法获取集数列表地址！&#x27;</span><br><br>    r = requests.get(<span class="hljs-string">&#x27;http://www.imomoe.in&#x27;</span> + match.group(<span class="hljs-number">1</span>), timeout=REQUEST_TIMEOUT)<br>    <span class="hljs-keyword">assert</span> r, <span class="hljs-string">&#x27;无法获取集数列表！&#x27;</span><br><br>    js = re.sub(<span class="hljs-string">r&quot;,urlinfo=&#x27;http://&#x27;\+document.domain\+&#x27;/player/(\d+)-&lt;from&gt;-&lt;pos&gt;.html&#x27;;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, r.content.decode(<span class="hljs-string">&quot;gbk&quot;</span>)<br>            .replace(<span class="hljs-string">&#x27;var VideoListJson=&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)).replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>)  <span class="hljs-comment"># !转成合法json</span><br>    <span class="hljs-keyword">return</span> json.loads(js)[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selectEpisodes</span>(<span class="hljs-params">episodeList</span>):</span><br>    episodeCount = <span class="hljs-built_in">len</span>(episodeList)<br>    <span class="hljs-keyword">assert</span> episodeCount &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;未找到任何一集&quot;</span><br><br>    print(<span class="hljs-string">f&#x27;共<span class="hljs-subst">&#123;episodeCount&#125;</span>集&#x27;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        inputText = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;选择下载集数（多个使用单个空格分隔，输入&quot;all&quot;下载全部）：&#x27;</span>)<br>        <span class="hljs-keyword">if</span> inputText.strip().lower() == <span class="hljs-string">&#x27;all&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">range</span>(episodeCount)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> [(<span class="hljs-built_in">int</span>(i) - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> inputText.split(<span class="hljs-string">&#x27; &#x27;</span>)]<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">processBar</span>(<span class="hljs-params">percent, startText=<span class="hljs-string">&#x27;&#x27;</span>, endText=<span class="hljs-string">&#x27;100%&#x27;</span>, totalLength=<span class="hljs-number">30</span></span>):</span><br>    bar = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&quot;#&quot;</span>] * <span class="hljs-built_in">int</span>(percent * totalLength)) + <span class="hljs-string">&#x27;&#x27;</span><br>    bar = <span class="hljs-string">&#x27;\r&#x27;</span> + startText + bar.ljust(totalLength) + <span class="hljs-string">&#x27; &#123;:0&gt;4.1f&#125;%|&#x27;</span>.<span class="hljs-built_in">format</span>(percent * <span class="hljs-number">100</span>) + endText<br>    print(bar, end=<span class="hljs-string">&#x27;&#x27;</span>, flush=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">downloadVideo</span>(<span class="hljs-params">url, path</span>):</span><br>    r = requests.get(url, stream=<span class="hljs-literal">True</span>, timeout=REQUEST_TIMEOUT)<br>    <span class="hljs-keyword">assert</span> r.ok, r.reason<br><br>    contentLength = <span class="hljs-built_in">len</span>(r.content)<br>    print(<span class="hljs-string">f&quot;文件大小：<span class="hljs-subst">&#123;contentLength&#125;</span>&quot;</span>)<br><br>    downloadedLength = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> mp4:<br>        <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> r.iter_content(chunk_size=DOWNLOAD_CHUNK_SIZE):<br>            <span class="hljs-keyword">if</span> chunk:<br>                mp4.write(chunk)<br>                downloadedLength += <span class="hljs-built_in">len</span>(chunk)<br>                processBar(downloadedLength / contentLength)<br>        print()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    searchWord = quote(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;搜索: &#x27;</span>).encode(<span class="hljs-string">&#x27;gb2312&#x27;</span>))<br>    searchRequest = requests.get(<span class="hljs-string">&#x27;http://www.imomoe.in/search.asp?searchword=&#x27;</span> + searchWord, timeout=REQUEST_TIMEOUT)<br>    animationList = getAnimationList(searchRequest)<br>    animation = selectAnimation(animationList)<br>    episodeList = getEpisodeList(animation)<br>    episodeIndices = selectEpisodes(episodeList)<br><br>    directory = os.path.join(os.path.dirname(__file__), <span class="hljs-string">&#x27;animations&#x27;</span>, animation.title)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(directory):<br>        os.makedirs(directory)<br><br>    print()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> episodeIndices:<br>        print(<span class="hljs-string">f&#x27;开始下载第<span class="hljs-subst">&#123;i + <span class="hljs-number">1</span>&#125;</span>集&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-built_in">len</span>(episodeList) <span class="hljs-keyword">or</span> i &lt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">raise</span> ValueError()<br><br>            downloadVideo(episodeList[i].split(<span class="hljs-string">&#x27;$&#x27;</span>)[<span class="hljs-number">1</span>], os.path.join(directory, <span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;.mp4&#x27;</span>).strip())<br>            print(<span class="hljs-string">&#x27;下载成功&#x27;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            print(e)<br>            print(<span class="hljs-string">&#x27;下载失败&#x27;</span>)<br>        print()<br><br>    os.system(<span class="hljs-string">&#x27;pause&#x27;</span>)<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>网页爬虫</tag>
      
      <tag>动漫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三角恒等变换</title>
    <link href="/posts/ed79c1d6/"/>
    <url>/posts/ed79c1d6/</url>
    
    <content type="html"><![CDATA[<h1 id="倒数关系"><a href="#倒数关系" class="headerlink" title="倒数关系"></a>倒数关系</h1><script type="math/tex; mode=display">\begin{align}\sin \alpha \cdot \csc \alpha &= 1 \\\\\cos \alpha \cdot \sec \alpha &= 1 \\\\\tan \alpha \cdot \cot \alpha &= 1\end{align}</script><h1 id="商数关系"><a href="#商数关系" class="headerlink" title="商数关系"></a>商数关系</h1><script type="math/tex; mode=display">\frac{\sin \alpha}{\cos \alpha} = \tan \alpha = \frac{\sec \alpha}{\csc \alpha} = \frac{1}{\cot \alpha}</script><h1 id="平方关系"><a href="#平方关系" class="headerlink" title="平方关系"></a>平方关系</h1><script type="math/tex; mode=display">\begin{align}\sin^2 \alpha + \cos^2 \alpha &= 1 \\\\\sec^2 \alpha - \tan^2 \alpha &= 1 \\\\\csc^2 \alpha - \cot^2 \alpha &= 1\end{align}</script><h1 id="诱导公式"><a href="#诱导公式" class="headerlink" title="诱导公式"></a>诱导公式</h1><ul><li><strong>奇变偶不变，符号看象限</strong></li></ul><h2 id="第一组"><a href="#第一组" class="headerlink" title="第一组"></a>第一组</h2><script type="math/tex; mode=display">\begin{align}\sin(2k\pi + \alpha) &= -\sin \alpha \\\\\cos(2k\pi + \alpha) &= -\cos \alpha \\\\\tan(2k\pi + \alpha) &= \tan \alpha \\\\k \in Z\end{align}</script><h2 id="第二组"><a href="#第二组" class="headerlink" title="第二组"></a>第二组</h2><script type="math/tex; mode=display">\begin{align}\sin(-\alpha) &= -\sin \alpha \\\\\cos(-\alpha) &= \cos \alpha  \\\\\tan(-\alpha) &= -\tan \alpha\end{align}</script><h2 id="第三组"><a href="#第三组" class="headerlink" title="第三组"></a>第三组</h2><script type="math/tex; mode=display">\begin{align}\sin(\pi + \alpha) &= -\sin \alpha \\\\\cos(\pi + \alpha) &= -\cos \alpha \\\\\tan(\pi + \alpha) &= \tan \alpha\end{align}</script><h2 id="第四组"><a href="#第四组" class="headerlink" title="第四组"></a>第四组</h2><script type="math/tex; mode=display">\begin{align}\sin(\pi - \alpha) &= \sin \alpha  \\\\\cos(\pi - \alpha) &= -\cos \alpha \\\\\tan(\pi - \alpha) &= -\tan \alpha\end{align}</script><h2 id="第五组"><a href="#第五组" class="headerlink" title="第五组"></a>第五组</h2><script type="math/tex; mode=display">\begin{align}\sin(\frac{\pi}{2} - \alpha) &= \cos \alpha \\\\\cos(\frac{\pi}{2} - \alpha) &= \sin \alpha \\\\\tan(\frac{\pi}{2} - \alpha) &= \cot \alpha\end{align}</script><h2 id="第六组"><a href="#第六组" class="headerlink" title="第六组"></a>第六组</h2><script type="math/tex; mode=display">\begin{align}\sin(\frac{\pi}{2} + \alpha) &= \cos \alpha  \\\\\cos(\frac{\pi}{2} + \alpha) &= -\sin \alpha \\\\\tan(\frac{\pi}{2} + \alpha) &= -\cot \alpha\end{align}</script><h1 id="和差角"><a href="#和差角" class="headerlink" title="和差角"></a>和差角</h1><script type="math/tex; mode=display">\begin{align}\sin(\alpha + \beta) &= \sin \alpha \cos \beta + \cos \alpha \sin \beta \\\\\sin(\alpha - \beta) &= \sin \alpha \cos \beta - \cos \alpha \sin \beta \\\\\cos(\alpha + \beta) &= \cos \alpha \cos \beta - \sin \alpha \sin \beta \\\\\cos(\alpha - \beta) &= \cos \alpha \cos \beta + \sin \alpha \sin \beta \\\\\tan(\alpha + \beta) &= \frac{\tan \alpha + \tan \beta}{1 - \tan \alpha \tan \beta} \\\\\tan(\alpha - \beta) &= \frac{\tan \alpha - \tan \beta}{1 + \tan \alpha \tan \beta}\end{align}</script><h1 id="倍角"><a href="#倍角" class="headerlink" title="倍角"></a>倍角</h1><h2 id="二倍角"><a href="#二倍角" class="headerlink" title="二倍角"></a>二倍角</h2><script type="math/tex; mode=display">\begin{align}\sin 2\alpha &= 2\sin \alpha \cos \alpha \\\\\cos 2\alpha &= \cos^2 \alpha - \sin^2 \alpha \\\\             &= 2\cos^2 \alpha - 1 \\\\             &= 1 - 2\sin^2 \alpha \\\\\tan 2\alpha &= \frac{2\tan \alpha}{1 - \tan^2 \alpha}\end{align}</script><h2 id="三倍角"><a href="#三倍角" class="headerlink" title="三倍角"></a>三倍角</h2><script type="math/tex; mode=display">\begin{align}\sin 3\alpha &= -4\sin^3 \alpha + 3\sin \alpha \\\\\cos 3\alpha &= 4\cos^3 \alpha - 3\cos \alpha \\\\\tan 3\alpha &= \frac{3\tan \alpha - \tan^3 \alpha}{1 - 3\tan^2 \alpha}\end{align}</script><h1 id="半角公式-降幂公式"><a href="#半角公式-降幂公式" class="headerlink" title="半角公式/降幂公式"></a>半角公式/降幂公式</h1><script type="math/tex; mode=display">\begin{align}\sin^2 \alpha &= \frac{1 - \cos 2\alpha}{2} \\\\\cos^2 \alpha &= \frac{1 + \cos 2\alpha}{2} \\\\\tan^2 \alpha &= \frac{1 - \cos 2\alpha}{1 + \cos 2\alpha} \\\\\tan \alpha &= \frac{sin 2\alpha}{1 + \cos 2\alpha} \\\\            &= \frac{1 - \cos 2\alpha}{sin 2\alpha}\end{align}</script><h1 id="升幂公式"><a href="#升幂公式" class="headerlink" title="升幂公式"></a>升幂公式</h1><script type="math/tex; mode=display">\begin{align}1 + \cos 2\alpha &= 2\cos^2 \alpha \\\\1 - \cos 2\alpha &= 2\sin^2 \alpha\end{align}</script><h1 id="积化和差"><a href="#积化和差" class="headerlink" title="积化和差"></a>积化和差</h1><script type="math/tex; mode=display">\begin{align}\sin \alpha \cos \beta &= \frac{1}{2}(\sin(\alpha + \beta) + \sin(\alpha - \beta)) \\\\\cos \alpha \sin \beta &= \frac{1}{2}(\sin(\alpha + \beta) - \sin(\alpha - \beta)) \\\\\cos \alpha \cos \beta &= \frac{1}{2}(\cos(\alpha + \beta) + \cos(\alpha - \beta)) \\\\\sin \alpha \sin \beta &= -\frac{1}{2}(\cos(\alpha + \beta) - \cos(\alpha - \beta))\end{align}</script><h1 id="和差化积"><a href="#和差化积" class="headerlink" title="和差化积"></a>和差化积</h1><script type="math/tex; mode=display">\begin{align}\sin \alpha + \sin \beta &= 2\sin \frac{\alpha + \beta}{2} \ cos \frac{\alpha - \beta}{2} \\\\\sin \alpha - \sin \beta &= 2\cos \frac{\alpha + \beta}{2} \ sin \frac{\alpha - \beta}{2} \\\\\cos \alpha + \cos \beta &= 2\cos \frac{\alpha + \beta}{2} \ cos \frac{\alpha - \beta}{2} \\\\\cos \alpha - \cos \beta &= -2\sin \frac{\alpha + \beta}{2} \ sin \frac{\alpha - \beta}{2}\end{align}</script><h1 id="万能置换公式"><a href="#万能置换公式" class="headerlink" title="万能置换公式"></a>万能置换公式</h1><script type="math/tex; mode=display">\begin{align}\sin \alpha &= \frac{2\tan \frac{\alpha}{2}}{1 + \tan^2 \frac{\alpha}{2}} \\\\\cos \alpha &= \frac{1 - \tan^2 \frac{\alpha}{2}}{1 + \tan^2 \frac{\alpha}{2}} \\\\\tan \alpha &= \frac{2\tan \frac{\alpha}{2}}{1 - \tan^2 \frac{\alpha}{2}}\end{align}</script><h1 id="辅助角公式"><a href="#辅助角公式" class="headerlink" title="辅助角公式"></a>辅助角公式</h1><script type="math/tex; mode=display">\begin{align}a\sin \alpha + b\cos \alpha = \sqrt{a^2 + b^2} \sin(\alpha + \varphi) \\\\\text{其中} \cos \varphi = \frac{a}{\sqrt{a^2 + b^2}}, \sin \varphi = \frac{b}{\sqrt{a^2 + b^2}}\end{align}</script><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><script type="math/tex; mode=display">\begin{align}\tan \alpha + \frac{1}{\tan \alpha} = \frac{2}{\sin 2\alpha}  \\\\\tan \alpha - \frac{1}{\tan \alpha} = -\frac{2}{\tan 2\alpha} \\\\|{\sin(n\theta)}| < n|{\sin \theta}|,\ (n \in N^+)\end{align}</script>]]></content>
    
    
    <categories>
      
      <category>高考</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>三角恒等式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
